declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'EDIT'"
  method: post
  accepts: json
  returns: json
  namespace: service
  allowlist:
    body:
      - field: content
        type: string
        description: "Body field 'content'"
      - field: description
        type: string
        description: "Body field 'description'"
      - field: name
        type: string
        description: "Body field 'name'"
      - field: structure
        type: json
        description: "Body field 'structure'"
      - field: type
        type: string
        description: "Body field 'type'"
    params:
      - field: id
        type: string
        description: "Parameter 'id'"

extract_request_data:
  assign:
    id: ${incoming.params.id}
    name: ${incoming.body.name}
    description: ${incoming.body.description}
    type: ${incoming.body.type}
    content: ${incoming.body.content}
    structure: ${incoming.body.structure}

check_for_content:
  switch:
    - condition: ${content === null}
      next: check_for_required_parameters
  next: convert_json_content_to_yml    

convert_json_content_to_yml:
  call: http.post
  args:
    url: "[#SERVICE_DMAPPER]/conversion/json_to_yaml_data"
    body:
      data: ${content}
  result: ymlResult

check_for_type:
  switch:
    - condition: ${type === 'GET'}
      next: add_get_dsl
  next: add_post_dsl

add_get_dsl:
  call: http.post
  args:
    url: "[#SERVICE_DMAPPER]/file-manager/create"
    body:
      file_path: "[#RUUTER_SERVICES_GET_PATH]/draft/${name}.tmp"
      content: ${ymlResult.response.body.yaml}
  result: results
  next: check_for_required_parameters

add_post_dsl:
  call: http.post
  args:
    url: "[#SERVICE_DMAPPER]/file-manager/create"
    body:
      file_path: "[#RUUTER_SERVICES_POST_PATH]/draft/${name}.tmp"
      content: ${ymlResult.response.body.yaml}
  result: results
  next: check_for_required_parameters

check_for_required_parameters:
  switch:
    - condition: ${id === null || name === null || description === null}
      next: return_incorrect_request
    - condition: ${type === null}
      next: return_incorrect_request

upper_case_type:
  assign:
    type: ${type.toUpperCase()}

check_type:
  switch:
    - condition: ${type !== 'GET' && type !== 'POST'}
      next: return_incorrect_request

get_service_by_id:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]/get-service-by-id"
    body:
      id: ${id}
  result: old_service_result

assign_values:
  assign:
    old_name: ${old_service_result.response.body[0].name}
    old_structure: ${old_service_result.response.body[0].structure}
    old_state: ${old_service_result.response.body[0].state}

check_new_structure:
  switch:
    - condition: ${structure === null}
      next: use_old_structure
    - condition: ${structure !== null}
      next: use_new_structure

use_new_structure:
  assign:
    new_structure: ${structure}
  next: rename_dsl

use_old_structure:
  assign:
    new_structure: ${old_structure.value}
  next: rename_dsl

rename_dsl:
  call: http.post
  args:
    url: "[#SERVICE_DMAPPER]/file-manager/move"
    body:
      file_path: "[#RUUTER_SERVICES_PATH]/${type}/[#RUUTER_SERVICES_DIR_PATH]/${old_state}/${old_name}.tmp"
      new_path: "[#RUUTER_SERVICES_PATH]/${type}/[#RUUTER_SERVICES_DIR_PATH]/${old_state}/${name}.tmp"
  result: results

check_result:
  switch:
    - condition: ${200 <= results.response.statusCodeValue && results.response.statusCodeValue < 300}
      next: service_edit
  next: return_bad_request

service_edit:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]/edit"
    body:
      id: ${id}
      name: ${name}
      description: ${description}
      structure: ${new_structure}
  result: editedService

return_ok:
  reloadDsl: true
  status: 200
  return: "Edited Successfully"
  next: end

return_bad_request:
  status: 400
  return: ${err_result.response.body.message}
  next: end

return_incorrect_request:
  status: 400
  return: "Required parameter(s) missing"
  next: end
