declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'STATUS'"
  method: post
  accepts: json
  returns: json
  namespace: service
  allowlist:
    body:
      - field: id
        type: string
        description: "Body field 'id'"
      - field: state
        type: string
        description: "Body field 'state'"
      - field: type
        type: string
        description: "Body field 'type'"

# TODO: Change Service Status on bot so it can be activated or diactivated
extract_request_data:
  assign:
    id: ${incoming.body.id}
    new_state: ${incoming.body.state}
    ruuter_type: ${incoming.body.type}

check_for_required_parameters:
  switch:
    - condition: ${id === null || new_state === null || ruuter_type === null}
      next: return_incorrect_request
    - condition: ${new_state === "ready"}
      next: set_plain_status
  next: get_current_status

get_current_status:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]/status"
    body:
      id: ${id}
  result: status_res
  next: assign_old_status_and_path

assign_old_status_and_path:
  assign:
    old_file_status_path: "${status_res.response.body[0].currentState === 'ready' ? 'draft' : status_res.response.body[0].currentState}"
    old_file_end: "${status_res.response.body[0].currentState !== 'active' ? '.tmp' : '.yml'}"
  next: check_status

check_status:
  switch:
    - condition: ${status_res.response.body[0].currentState === new_state}
      next: return_same_state_update
  next: set_status

set_status:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]/set-status"
    body:
      id: ${id}
      new_state: ${new_state}
  result: res
  next: get_status_name

set_plain_status:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]/set-status"
    body:
      id: ${id}
      new_state: ${new_state}
  result: draft_res
  next: return_ok

get_status_name:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]/get-service-name-by-id"
    body:
      id: ${id}
  result: name_res
  next: assign_values

assign_values:
  assign:
    name: ${name_res.response.body[0].name}
    service_name: "service_${name_res.response.body[0].name}"
  next: check_file_exists

check_file_exists:
  call: http.post
  args:
    url: "[#SERVICE_DMAPPER]/file-manager/exists"
    body:
      file_path: "/Ruuter/${ruuter_type}/services/${old_file_status_path}/${name + old_file_end}"
  result: service_file_exists_result
  next: validate_file_exists

validate_file_exists:
  switch:
    - condition: ${!!service_file_exists_result.response.body}
      next: check_for_status
  next: return_service_file_missing

check_for_status:
  switch:
    - condition: ${new_state === "active"}
      next: activate_service
    - condition: ${new_state === "draft"}
      next: draft_service  
  next: deactivate_service

activate_service:
  call: http.post
  args:
    url: "[#SERVICE_DMAPPER]/file-manager/move"
    body:
      file_path: "/Ruuter/${ruuter_type}/services/${old_file_status_path}/${name + old_file_end}"
      new_path: "/Ruuter/${ruuter_type}/services/active/${name}.yml"
  result: activate_service_result
  next: return_ok

deactivate_service:
  call: http.post
  args:
    url: "[#SERVICE_DMAPPER]/file-manager/move"
    body:
      file_path: "/Ruuter/${ruuter_type}/services/${old_file_status_path}/${name + old_file_end}"
      new_path: "/Ruuter/${ruuter_type}/services/inactive/${name}.tmp"
  result: deactivate_service_result
  next: return_ok

draft_service:
  call: http.post
  args:
    url: "[#SERVICE_DMAPPER]/file-manager/move"
    body:
      file_path: "/Ruuter/${ruuter_type}/services/${old_file_status_path}/${name + old_file_end}"
      new_path: "/Ruuter/${ruuter_type}/services/draft/${name}.tmp"
  result: draft_service_result
  next: check_for_intent_connection

check_for_intent_connection:
  call: http.post
  args:
    url: "[#SERVICE_TRAINING_RESQL]/get-service-trigger"
    body:
      serviceId: ${id}
  result: connection_res
  next: check_is_connected_to_intents_or_has_requests

check_is_connected_to_intents_or_has_requests:
  switch:
    - condition: ${connection_res.response.body.length > 0}
      next: delete_intent_connection
  next: return_ok

delete_intent_connection:
  call: http.post
  args:
    url: "[#SERVICE_TRAINING_RESQL]/add-service-trigger"
    body:
      serviceId: ${id}
      intent: ${connection_res.response.body[0].intent}
      status: "deleted"
      authorRole: ${connection_res.response.body[0].authorRole}
      serviceName: ${connection_res.response.body[0].serviceName}
  result: return_ok

return_ok:
  status: 200
  return: "Status Changed Successfully"
  next: end

return_bad_request:
  status: 400
  return: ${err_result.response.body.message}
  next: end

return_incorrect_request:
  status: 400
  return: "Required parameter(s) missing"
  next: end

return_same_state_update:
  status: 400
  return: "Service is already in this state"
  next: end

return_service_file_missing:
  status: 500
  return: "Service file to update is missing"
  next: end
