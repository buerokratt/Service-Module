declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'RESPOND-TO-CONNECTION-REQUEST'"
  method: post
  accepts: json
  returns: json
  namespace: service
  allowlist:
    body:
      - field: authorRole
        type: string
        description: "Body field 'authorRole'"
      - field: intent
        type: string
        description: "Body field 'intent'"
      - field: serviceId
        type: string
        description: "Body field 'serviceId'"
      - field: serviceName
        type: string
        description: "Body field 'serviceName'"
      - field: status
        type: string
        description: "Body field 'status'"

extract_request_data:
  assign:
    serviceId: ${incoming.body.serviceId}
    serviceName: ${incoming.body.serviceName}
    serviceMethod: ${incoming.body.serviceMethod}
    authorRole: ${incoming.body.authorRole}
    intent: ${incoming.body.intent}
    status: ${incoming.body.status}

check_status:
  switch:
    - condition: ${status === "approved"}
      next: link_intent_to_service_in_rasa_domain
  next: add_connection_request

link_intent_to_service_in_rasa_domain:
  call: http.post
  args:
    url: "[#SERVICE_RUUTER]/services/domain-intent-service-link"
    headers:
      cookie: ${incoming.headers.cookie}
    body:
      serviceName: ${serviceName}
      serviceMethod: ${serviceMethod}
      intent: ${intent}
      type: "Add"
  result: link_res
  error: return_intent_does_not_exist
  next: add_connection_request

add_connection_request:
  call: http.post
  args:
    url: "[#SERVICE_TRAINING_RESQL]/add-service-trigger"
    body:
      serviceId: ${serviceId}
      intent: ${intent}
      status: ${status}
      authorRole: ${authorRole}
      serviceName: ${serviceName}
  result: res
  next: return_result

return_result:
  status: 200
  return: "Response to connection request"
  next: end

return_intent_does_not_exist:
  status: 400
  return: 'does not exists'
  next: end
